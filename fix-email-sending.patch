--- 修复代充CDK手动发货邮件发送问题 ---

问题描述：
1. 代充CDK（manual_recharge类型）手动发货后用户没有收到邮件
2. 前台状态可能不更新

根本原因分析：
1. 邮件服务可能未正确配置
2. 邮件发送失败时没有错误提示
3. 异步操作可能导致邮件发送被跳过

修复方案：

=== 1. 检查并配置邮件服务 ===
在 backend-api/.env 文件中添加：
```
BREVO_API_KEY=your-brevo-api-key
EMAIL_FROM_ADDRESS=noreply@yourdomain.com
EMAIL_FROM_NAME=Your Store Name
```

=== 2. 修改 backend-api/src/routes/order.routes.js ===
在第 589-618 行的邮件发送部分，添加更详细的日志：

原代码：
```javascript
// 发送邮件通知（如果有邮箱）
if (order.userEmail) {
  try {
    // ... 邮件发送代码
  } catch (emailError) {
    console.error('发送邮件失败:', emailError);
  }
}
```

修改为：
```javascript
// 发送邮件通知（如果有邮箱）
if (order.userEmail) {
  console.log(`📧 准备发送手动发货邮件到: ${order.userEmail}`);
  
  try {
    // 获取商品信息
    const product = await Product.findByPk(order.productId);
    
    // 准备邮件数据
    const emailData = {
      userEmail: order.userEmail,
      orderNo: order.orderNo,
      productName: product ? (product.title || product.name) : '商品',
      productInfo: additionalInfo || product?.description || '',
      amount: order.totalAmount || order.amount,
      cdkKeys: cdkCodes
    };
    
    console.log('📧 邮件数据:', JSON.stringify(emailData, null, 2));
    
    // 发送手动发货完成邮件
    const brevoService = require('../services/brevoService.js').default;
    
    // 检查 Brevo 是否初始化
    if (!brevoService.initialized) {
      console.error('❌ Brevo服务未初始化，请检查 BREVO_API_KEY 配置');
      throw new Error('邮件服务未配置');
    }
    
    const result = await brevoService.sendManualDeliveryCompleteEmail(emailData);
    
    if (result.success) {
      console.log(`✅ 发货邮件发送成功: ${order.userEmail}`);
      console.log(`   邮件ID: ${result.messageId}`);
    } else {
      console.error(`❌ 发货邮件发送失败: ${result.message}`);
      // 可以考虑添加重试机制
    }
  } catch (emailError) {
    console.error('❌ 发送邮件异常:', emailError);
    console.error('   错误详情:', emailError.message);
    // 邮件发送失败不影响发货流程，但要记录错误
  }
} else {
  console.log('⚠️ 订单没有用户邮箱，跳过邮件发送');
}
```

=== 3. 增强 brevoService.js 的错误处理 ===
在 backend-api/src/services/brevoService.js 第 243-285 行：

添加更详细的错误日志：
```javascript
async sendManualDeliveryCompleteEmail(orderData) {
  console.log('📧 调用 sendManualDeliveryCompleteEmail');
  console.log('   初始化状态:', this.initialized);
  
  if (!this.initialized) {
    console.log('❌ Brevo未初始化，跳过邮件发送');
    console.log('   请检查 BREVO_API_KEY 是否配置');
    return { success: false, message: 'Brevo未配置' };
  }

  try {
    const { userEmail, orderNo, productName, productInfo, amount, cdkKeys } = orderData;
    
    console.log(`📧 准备发送手动发货邮件:`);
    console.log(`   收件人: ${userEmail}`);
    console.log(`   订单号: ${orderNo}`);
    console.log(`   商品: ${productName}`);
    console.log(`   CDK数量: ${cdkKeys?.length || 0}`);

    // ... 其余代码保持不变

    const response = await this.apiInstance.sendTransacEmail(sendSmtpEmail);
    
    const messageId = response?.body?.messageId || response?.messageId || 'unknown';
    
    console.log(`✅ 手动发货完成邮件发送成功!`);
    console.log(`   订单: ${orderNo}`);
    console.log(`   邮件ID: ${messageId}`);
    
    return { 
      success: true, 
      message: '邮件发送成功',
      messageId: messageId 
    };
  } catch (error) {
    console.error('❌ 发送手动发货完成邮件失败!');
    console.error('   错误类型:', error.name);
    console.error('   错误信息:', error.message);
    console.error('   错误详情:', error.response?.body || error);
    
    return { 
      success: false, 
      message: error.message || '邮件发送失败'
    };
  }
}
```

=== 4. 前端状态更新优化 ===
在 jiujiu-admin-simple/src/views/Order.vue 第 1285-1292 行：

确保发货成功后刷新订单列表：
```javascript
if (response.data.code === 200) {
  ElMessage.success('发货成功')
  deliveryDialogVisible.value = false
  
  // 立即刷新订单列表
  await fetchOrders()
  
  // 更新全局待发货数量
  globalPendingDeliveryCount.value = Math.max(0, (globalPendingDeliveryCount.value || 1) - 1)
  
  // 可选：显示邮件发送状态
  if (response.data.data?.emailSent) {
    ElMessage.success('邮件通知已发送')
  }
}
```

=== 5. 测试步骤 ===
1. 确保 BREVO_API_KEY 已配置
2. 重启后端服务
3. 在管理后台找到一个代充订单
4. 点击"发货"按钮
5. 输入CDK码和附加信息
6. 确认发货
7. 检查：
   - 控制台日志是否显示邮件发送成功
   - 订单状态是否更新为"已发货"
   - 用户邮箱是否收到邮件

=== 6. 故障排查 ===
如果邮件仍然没有发送，检查：
1. backend-api/.env 中的 BREVO_API_KEY 是否有效
2. 控制台是否有错误日志
3. 用户邮箱地址是否有效
4. Brevo 账户是否有足够的额度
5. 邮件是否被归类为垃圾邮件